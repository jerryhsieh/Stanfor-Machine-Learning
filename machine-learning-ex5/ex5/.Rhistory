demo()
help()
demo()
rnorm
a <- available-packages()
q()
Library("ggplot2")
help()
help("Library")
?Library
help.search("Library")
library()
library("ggplot2")
search()
library("devtools")
library(devtools)
find_rtool()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
add2 <- function(x, y) {
x + y
}
add2(3,4)
above <- function(x, n) {
use <- x > n
x[use]
}
above(c(2,4,9,11,14), 10)
columnmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
columnmean(airquality, FALSE)
search()
make.power <- function(n) {}
pow <- function (x) {}
pow <- x ^ n
;
q
makepow <- function (n) {
pow <- function (x) {
pow <- x ^ n
}
pow
}
cube <- makepow (3)
sqr <- makepow(2)
cube(2)
sqr(2)
ls(environment(cube))
makepow <- function (n) {
pow <- function (x) {
x ^ n
}
pow
}
cube(2)
cube <- makepow(3)
cube(2)
sqr <- makepow(2)
sqr(9)
ls(environment(sqr))
get("n", environment)
get("n", environment(cube))
get("n", environment(sqr))
get("pow", environment(cube))
x <- matrix(1:4,2,2)
x
y <- matrix(rep(10,4),2,2)
y
x * y
x /y
x %*% y
?unclass
unclass(x)
x
z <- as.date("1970-01-01")
z <- as.Date("1970-01-01")
z
class(z)
unclass(z)
x <- sys.time()
x <- Sys.time()
x
p <- as.POSIXlt(x)
p
unclass(p)
names(unclass(p))
p$sec
p
q <- POSIXct(x)
q <- as.POSIXct(x)
q
unclass(q)
p$isdst
p
class(p)
unclass(p)
?strptime
strptime(x, "%m/%d/%y  %H:%M:%S")
x
class(x)
format(x, "%H:%M:%S")
x <- 1:10
if(x > 5) {
x <- 0
}
x
x <- 10:20
if(x > 5) {
x <- 0
}
x
class(x)
length(x)
x <- 10:20
class(x)
length(x)
if(x > 5) {
x <- 0
}
x
class(x)
length(x)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
ls(environment(f))
ls(environment(g))
z <- 1000
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
Sys.getenv("MYSQL_HOME")
Sys.setenv(MYSQL_HOME="/usr/local/mysql")
Sys.getenv("MYSQL_HOME")
install.packages("RMySQL", type="source")
sessioninfo()
list.files()
getwd()
setwd("/Users/jerry/Desktop/coursera")
list.files()
source("ExploreData1.R")
dev.list
dev.list()
?na.strings
??na.strings
?Quotes
file = "./data/household_power_consumption.txt"
myData <- read.table(file,sep=";",stringsAsFactors=F, na.strings=c(“?”))
list.files("./data")
myData <- read.csv(file,sep=";",stringsAsFactors=F, na.strings=c(“?”))
?unexpected input
?"unexpected input"
??"unexpected input"
myData <- read.table(file,sep=";",stringsAsFactors=F, na.strings=c(‘?’))
myData <- read.table(file,sep=";",stringsAsFactors=F, na.strings="?")
str(myData)
quit()
install.packages("knitr")
)
myplot <- function(sigma, mua, n, alpha) {
g
g = g + geom_vline(xintercept=xitc, size=3)
g = g + geom_vline(xintercept=xitc, size=3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
)
library(manipulate)
mu0 <- 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom="line", args=list(mean=mu0, sd=sigma/sqrt(n)), size=2, col="red")
g = g + stat_function(fun=dnorm, geom="line", args=list(mean=mua, sd=sigma/sqrt(n)), size=2, col="blue")
xitc = mu0 + qnorm(1-alpha) *sigma /sqrt(n)
g = g + geom_vline(xintercept=xitc, size=3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1,10, step=1, initial=4),
mua = slider(30,35, step=1, initial = 32),
n = slider(1,50, step=1, initial = 16),
alpha= slider(0.01, 0.1, step=0.01, initial=0.05)
)
library(manipulate)
library(ggplot2)
mu0 <- 30
myplot <- function(sigma, mua, n, alpha) {
g = ggplot(data.frame(mu=c(27,36)), aes(x=mu))
g = g + stat_function(fun=dnorm, geom="line", args=list(mean=mu0, sd=sigma/sqrt(n)), size=2, col="red")
g = g + stat_function(fun=dnorm, geom="line", args=list(mean=mua, sd=sigma/sqrt(n)), size=2, col="blue")
xitc = mu0 + qnorm(1-alpha) *sigma /sqrt(n)
g = g + geom_vline(xintercept=xitc, size=3)
g
}
manipulate(
myplot(sigma, mua, n, alpha),
sigma = slider(1,10, step=1, initial=4),
mua = slider(30,35, step=1, initial = 32),
n = slider(1,50, step=1, initial = 16),
alpha= slider(0.01, 0.1, step=0.01, initial=0.05)
)
library(manipulate)
myHist <- function(mu) {
hist(galton, col="blue", breaks=100)
liens(c(mu, mu), c(0,150), col="red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu = ", mu))
test(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
library(UsingR)
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
myHist <- function(mu) {
hist(galton, col="blue", breaks=100)
lines(c(mu, mu), c(0,150), col="red", lwd = 5)
text(63,150, paste("mu = ", mu))
test(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
myHist <- function(mu) {
hist(galton, col="blue", breaks=100)
lines(c(mu, mu), c(0,150), col="red", lwd = 5)
text(63,150, paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
myHist <- function(mu) {
hist(galton, col="blue", breaks=100)
lines(c(mu, mu), c(0,150), col="red", lwd = 5)
mse <- mean((galton$child - mu)^2)
text(63,150, paste("mu = ", mu))
text(63,140, paste("MSE = ", round(mse,2)))
}
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
manipulate(myHist(mu), mu=slider(62,74, step=0.5))
library(swirl)
swirl()
cor(gpa_nor, gch_nor)
l_nor <- lm(child ~ parent, data=galton)
l_nor <- lm(gch_nor ~ gpa_nor)
swirl()
cor(gpa_nor, gch_nor)
0
q()
swirl()
library(swirl)
swirl()
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, data=galton)
fit = lm(child ~ parent, data=galton)
fit <- lm(child ~ parent, galton)
sqrt(sum(fit$residuals)/(n-2))
sqrt(sum(fit$residuals^2)) / (n-2)
sqrt(sum(fit$residuals^2)) / (n-2))
sqrt(sum(fit$residuals^2) / (n-2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum((galton$child - mu)^2)
sRes <- deviance(galton$child)
sRes <- deviance(fit)
1-(sRes/sTot)
1-sRes/sTot
summary(fit)$r.squared
cor(child, parent, data=galton)
cor(galton$child, galton$parent)
cor(galton$parent, galton$child)^2
names(mtcars)
lm(child ~ parent, galton)
fit <- lm(child ~ parent, galton)
summary(fit)
fit$coeff
head(galton)
summary(galton)
plot(fit)
plot(fit)
fit1 <- lm(child ~ parent - mean(parent), data=galton)
m <- mean(galton$parent)
m
fit1 <- lm(child ~ parent - m, data=galton)
fit1 <- lm(child ~ I(parent - m), data=galton)
summary(fit1)
fit2 <- lm(child ~ parent -1, galton)
summary(fit2)
fit3 <- lm(child ~ I(parent - 1), galton)
summary(fit3)
? lm
mx <- mean(galton$parent)
my <- mean(galton$child)
fit3 <- lm(I(child - my) ~ I(parent - mx), galton)
fit3
summary(fit3)
library(manipulate) myHist<-function(mu){    hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))}manipulate(myHist(mu),mu=slider(62,74,step=0.5))
myHist<-function(mu){    hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))}
library(manipulate)
myHist<-function(mu){    hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))}
myHist<-function(mu){    hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))}
myHist<-function(mu){    hist(galton$child,col="blue",breaks=100) lines(c(mu,mu),c(0,150),col="red",lwd=5) mse<-mean((galton$child-mu)^2) text(63,150,paste("mu=",mu)) text(63,140,paste("MSE=",round(mse,2)))}
myHist<-function(mu){
hist(galton$child,col="blue",breaks=100)
lines(c(mu,mu),c(0,150),col="red",lwd=5)
mse<-mean((galton$child-mu)^2)
text(63,150,paste("mu=",mu))
text(63,140,paste("MSE=",round(mse,2)))
}
manipulate(myHist(mu),mu=slider(62,74,step=0.5))
mean(galton$child)
myPlot <- function(beta){ y<-galton$child-mean(galton$child) x<-galton$parent-mean(galton$parent) freqData<-as.data.frame(table(x,y)) names(freqData)<-c("child","parent","freq") plot(    as.numeric(as.vector(freqData$parent)), as.numeric(as.vector(freqData$child)), pch=21,col="black",bg="lightblue", cex=.15*freqData$freq, xlab="parent",    ylab="child")abline(0,beta,lwd=3) points(0,0,cex=2,pch=19) mse<-mean((y-beta*x)^2) title(paste("beta=",beta,"mse=",round(mse,3)))}
myPlot <- function(beta){ y<-galton$child-mean(galton$child) x<-galton$parent-mean(galton$parent) freqData<-as.data.frame(table(x,y)) names(freqData)<-c("child","parent","freq") plot(    as.numeric(as.vector(freqData$parent)), as.numeric(as.vector(freqData$child)), pch=21,col="black",bg="lightblue", cex=.15*freqData$freq, xlab="parent",    ylab="child")abline(0,beta,lwd=3) points(0,0,cex=2,pch=19) mse<-mean((y-beta*x)^2) title(paste("beta=",beta,"mse=",round(mse,3)))}
myPlot <- function(beta){ y<-galton$child-mean(galton$child) ; x<-galton$parent-mean(galton$parent); freqData<-as.data.frame(table(x,y)) ;names(freqData)<-c("child","parent","freq") ; plot(    as.numeric(as.vector(freqData$parent)), as.numeric(as.vector(freqData$child)), pch=21,col="black",bg="lightblue", cex=.15*freqData$freq, xlab="parent",    ylab="child");abline(0,beta,lwd=3) points(0,0,cex=2,pch=19) mse<-mean((y-beta*x)^2); title(paste("beta=",beta,"mse=",round(mse,3)))}
myPlot <- function(beta){ y<-galton$child-mean(galton$child) ; x<-galton$parent-mean(galton$parent); freqData<-as.data.frame(table(x,y)) ;names(freqData)<-c("child","parent","freq") ; plot(    as.numeric(as.vector(freqData$parent)), as.numeric(as.vector(freqData$child)), pch=21,col="black",bg="lightblue", cex=.15*freqData$freq, xlab="parent",    ylab="child");abline(0,beta,lwd=3) points(0,0,cex=2,pch=19) mse<-mean((y-beta*x)^2); title(paste("beta=",beta,"mse=",round(mse,3)));}
?Gaussian
??Gaussian
# Regress the given variable on the given predictor,
# suppressing the intercept, and return the residual.
regressOneOnOne <- function(predictor, other, dataframe){
# Point A. Create a formula such as Girth ~ Height -1
formula <- paste0(other, " ~ ", predictor, " - 1")
# Use the formula in a regression and return the residual.
resid(lm(formula, dataframe))
}
# Eliminate the specified predictor from the dataframe by
# regressing all other variables on that predictor
# and returning a data frame containing the residuals
# of those regressions.
eliminate <- function(predictor, dataframe){
# Find the names of all columns except the predictor.
others <- setdiff(names(dataframe), predictor)
# Calculate the residuals of each when regressed against the given predictor
temp <- sapply(others, function(other)regressOneOnOne(predictor, other, dataframe))
# sapply returns a matrix of residuals; convert to a data frame and return.
as.data.frame(temp)
}
c("terms","formula")
terms(mtcars)
terms(mtcars$mpg)
terms
?terms
library(shiny)
q()
